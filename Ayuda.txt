Perfecto 👌 entonces aquí tienes un server.js ajustado para Render.

Este archivo se asegura de:

Usar process.env.PORT (Render asigna el puerto automáticamente).

Habilitar CORS para que tu frontend pueda consumir la API.

Cargar las variables de entorno desde .env (por ejemplo, conexión a la BD).


// backend/server.js
const express = require("express");
const cors = require("cors");
require("dotenv").config();

const app = express();

// Middlewares
app.use(cors()); // Permite que el frontend (otro dominio) consuma la API
app.use(express.json());

// Importar rutas
const rutas = require("./routes"); // Ajusta si tienes index.js dentro de /routes
app.use("/api", rutas);

// Puerto dinámico para Render o 3000 en local
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`🚀 Servidor corriendo en el puerto ${PORT}`);
});


---

📌 Ajustes que debes hacer

1. Instalar cors (si no lo tienes en package.json):

npm install cors


2. En tu package.json (backend) agrega un script para Render:

"scripts": {
  "start": "node server.js"
}


3. Subir variables de entorno a Render (en el dashboard de tu backend):

DB_HOST, DB_USER, DB_PASSWORD, DB_NAME o lo que uses en tu .env.





---

⚠️ Antes de desplegar, deberías probar en local:

cd backend
npm install
npm start

y verificar que responde en http://localhost:3000/api/....


---

👉 ¿Quieres que también te prepare un ejemplo de cómo debería quedar un fetch desde tu frontend/js apuntando al backend de Render?

